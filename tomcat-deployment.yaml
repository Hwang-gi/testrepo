# 규칙: 주석은 아래 내용 부연설명, 짧은 내용은 옆에 추가
apiVersion: apps/v1
kind: Deployment
# 디플로이먼트 이름: 1st-was, 레이블: was-app
metadata:
  name: 1st-was
  labels:
    app: was-app
spec:
# 기본 pod 개수는 3개로 설정
  replicas: 3
  selector:
    matchLabels:
      app: was-app
  # 롤링 업데이트 전략도 추가해봤습니다.
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1 # 업데이트 중에 사용할 수 없는 최대 파드 수
      maxSurge: 1 # 동시에 추가될 최대 파드 수
  template:
    metadata:
      labels:
        app: was-app
    spec:
      containers:
      # 컨테이너 이름: was, 사용 PORT: 8080
      - image: tomcat:9.0-alpine
        name: was
        ports:
        - containerPort: 8080

         # 특정 엔드포인트로 요청을 보내고, 응답 코드를 확인하여 컨테이너의 준비 상태를 판단
          # HTTP GET 방식으로 `/` 경로로 요청을 보내고, 5초 후부터 5초마다 확인을 시도

        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

        #  컨테이너가 요청을 처리할 준비가 되었는지를 확인
        # `echo "hello, world"` 명령을 사용하여 5초 후부터 10초마다 확인을 시도하며, 
        # 성공 임계값은 3으로 설정

        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        
        # 최소 요구 리소스 사용량은 256Mi 메모리, cpu는 250m, 
        # 최대 가능 사용량은 512Mi 메모리, cpu는 500m

        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        # 볼륨명: pv-was
        volumeMounts:
        - name: pv-was
          mountPath: /1st-was
      volumes:
      - name: pv-was
        # hostPath는 특정 워커 노드의 /1st-was 디렉터리에 마운트
        # (디렉터리가 없을 때는 자동 생성)
        hostPath:
          path: /1st-was
          type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: was-svc # 서비스 이름: was-svc, app 레이블: was-app타입: ClusterIP
spec:
  selector:
    app: was-app
  type: ClusterIP
  clusterIP: 10.100.100.101
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
